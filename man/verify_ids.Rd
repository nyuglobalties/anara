% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/verify.R
\name{verify_ids}
\alias{verify_ids}
\title{Verify record consistency across databases}
\usage{
verify_ids(
  dat_list,
  id_col,
  unique_id_col,
  file = NULL,
  database_col = "database",
  variables = NULL,
  tolerances = NULL,
  extra_metrics = NULL,
  extra_cols = NULL,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{dat_list}{A named list of \code{data.frames}}

\item{id_col}{The name of the ID, or primary key, column.
For consistency, should be the same across datasets.}

\item{unique_id_col}{The name of the row ID, or surrogate key,
column. For consistency, should be the same across datasets.}

\item{file}{If not \code{NULL}, a path to where the output spreadsheet
will be saved.}

\item{database_col}{The column name to store the \code{dat_list} names}

\item{variables}{A character vector of integer or character columns
to be used for comparison across datasets.}

\item{tolerances}{If not \code{NULL}, a \code{list} of parameters to be used as tolerances.
The list names must be variable names provided to \code{variables}, and the type
of tolerances depends on the variable:
\itemize{
\item If the variable is an integer, the tolerance is the maximum difference allowed
\item If the variable is a character, the tolerance is maximum dissimilarity allowed,
measured between 0 and 1.
}}

\item{extra_metrics}{A \code{metrics()} call that contains a collection of
\code{metric()} calls}

\item{extra_cols}{A character vector of columns to be included in the output
verification spreadsheet, mainly for reference and support during
manual inspection}

\item{verbose}{Enables logging}

\item{...}{Extra parameters passed to \code{anara::fix_format}}
}
\value{
A \code{data.frame} in the fix format
}
\description{
Compares demographic information across datasets to determine
if the entity identified with ID \code{x} is the same across all
datasets.
}
\examples{
if (FALSE) {
  anara::verify_ids(
    list(
      database1 = dat_1,
      database2 = dat_2
    ),
    id_col = "participant_id",
    unique_id_col = "unique_id",
    variables = c("female", "grade", "teacher_name", "form"),
    tolerances = list(
      form = 0,
      teacher_name = 0.05
    ),
    extra_cols = c(
      "start", "end",
      "incdnt_01", "incdnt_01_o", "incdnt_02", "incdnt_02_o"
    ),
    file = file.path("path", "to", "issues.csv")
  )
}
}
